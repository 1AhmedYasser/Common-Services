declaration:
  call: declare
  version: 0.2
  name: "Electricity Price Service"
  description: |
    This service fetches Nordpool electricity prices for a specified date range.
  method: get
  params:
    startDate: string  # yyyy-mm-dd format (start of the period)
    endDate: string    # yyyy-mm-dd format (end of the period)
  returns: json

# Prepare Dates based on startDate and endDate
prepareDates:
  assign:
    startDate: ${incoming.params.startDate || new Date().toISOString().split('T')[0]}  # defaults to today if not provided
    endDate: ${incoming.params.endDate || startDate]} # defaults to sratDate if not provided
    startDateTime: ${new Date(startDate).toISOString().split('T')[0] + "T21:00:00.000Z"}
    endDateTime: ${new Date(new Date(endDate).getTime() + 24 * 60 * 60 * 1000).toISOString().split('T')[0] + "T20:59:59.000Z"}  # end at the end of the day
  next: getPriceForPeriod

getPriceForPeriod:
  call: http.get
  args:
    url: https://dashboard.elering.ee/api/nps/price
    query:
      start: ${startDateTime}
      end: ${endDateTime}
  result: eleringPrices
  next: assignVariables

assignVariables:
  assign:
    # Sorting prices to get the lowest price and its timestamp within the specified range
    minPriceData: ${eleringPrices.response.body.data.ee.sort((a, b) => a.price - b.price)[0]}
    minPrice: ${minPriceData.price}
    minPriceTimestamp: ${minPriceData.timestamp}

    # Handling timestamp with Tallinn's time zone offset
    tallinnOffset: 10800  # Tallinn is UTC+3 during DST
    adjustedTimestamp: ${minPriceTimestamp + tallinnOffset} 
    adjustedHour: ${Math.floor((adjustedTimestamp % 86400) / 3600)}
    timeVar: ${("0" + adjustedHour).slice(-2) + ":00"}

    # Check if endDate is different from startDate
    dateVar: ${startDate + " to " + endDate}
  next: returnResult

returnResult:
  return: ${[dateVar, timeVar, minPrice]}
