declaration:
  call: declare
  version: 0.1
  name: " most recent voting results service"
  description: "Provides information for 5 most-recent voting results"
  method: get
  returns: json
  namespace:  common-services

prepareVariables:
  assign:
    offSet: 5 # to get start date withe enough data
    end: ${new Date().toISOString().split('T')[0]}
    start: ${new Date(new Date(end).setDate(new Date(end).getDate() - offSet)).toISOString().split('T')[0]} 
  next: makeAPIRequest

makeAPIRequest:
  call: http.get
  args:
    url: "https://api.riigikogu.ee/api/votings?endDate=${end}&lang=ET&startDate=${start}"
    headers:
      Accept: "application/json"
  result: votingData
  error: requestError
  next: votingDataFormatting

votingDataFormatting:
  assign:
    recentVotings: ${votingData.response.body.slice(0, 10)}
    votingDetails: ${recentVotings.flatMap(session => session.votings)
      .filter(voting => voting.type.value === "Avalik" && voting.relatedDraft)
      .sort((voting1, voting2) => new Date(voting2.startDateTime) - new Date(voting1.startDateTime)).slice(0, 5)}  # Take the first 5 items
  error: dataFormattingError
  next: assignResults

assignResults:
  assign:
    results:
      - title: ${votingDetails[0].relatedDraft.title}
        present: ${votingDetails[0].present}
        absent: ${votingDetails[0].absent}
        inFavor: ${votingDetails[0].inFavor}
        against: ${votingDetails[0].against}
        neutral: ${votingDetails[0].neutral}
        abstained: ${votingDetails[0].abstained}
      - title: ${votingDetails[1].relatedDraft.title}
        present: ${votingDetails[1].present}
        absent: ${votingDetails[1].absent}
        inFavor: ${votingDetails[1].inFavor}
        against: ${votingDetails[1].against}
        neutral: ${votingDetails[1].neutral}
        abstained: ${votingDetails[1].abstained}
      - title: ${votingDetails[2].relatedDraft.title}
        present: ${votingDetails[2].present}
        absent: ${votingDetails[2].absent}
        inFavor: ${votingDetails[2].inFavor}
        against: ${votingDetails[2].against}
        neutral: ${votingDetails[2].neutral}
        abstained: ${votingDetails[2].abstained}
      - title: ${votingDetails[3].relatedDraft.title}
        present: ${votingDetails[3].present}
        absent: ${votingDetails[3].absent}
        inFavor: ${votingDetails[3].inFavor}
        against: ${votingDetails[3].against}
        neutral: ${votingDetails[3].neutral}
        abstained: ${votingDetails[3].abstained}
      - title: ${votingDetails[4].relatedDraft.title}
        present: ${votingDetails[4].present}
        absent: ${votingDetails[4].absent}
        inFavor: ${votingDetails[4].inFavor}
        against: ${votingDetails[4].against}
        neutral: ${votingDetails[4].neutral}
        abstained: ${votingDetails[4].abstained}
  error: assignResultsError
  next: returnResults

returnResults:
  return: ${results}
  next: end

requestError:
  return: "Error: failed to get last 5 votings data."
  next: end

dataFormattingError:
  return: "Error: failed to format voting data"
  next: end

assignResultsError:
  return: "Error: failed to assign results"
  next: end
